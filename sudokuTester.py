import unittest
import sudokuSolverDense

class TestAllFunctions(unittest.TestCase):
        
    def boardsEqual(self,board,boardExpected):
        
        for rowi in range(9):
            for coli in range(9):
                self.assertEqual(type(boardExpected[coli][rowi]),type(board[coli][rowi]))
                if type(boardExpected[coli][rowi]) == int:
                    self.assertEqual(boardExpected[coli][rowi],board[coli][rowi])
                else:
                    if len(boardExpected[coli][rowi]) != len(board[coli][rowi]):
                        print(coli,rowi)
                        print(boardExpected[coli][rowi])
                        print(board[coli][rowi])
                    self.assertEqual(len(boardExpected[coli][rowi]),len(board[coli][rowi]))
                    for i in range(len(boardExpected[coli][rowi])):
                        self.assertEqual(boardExpected[coli][rowi][i],board[coli][rowi][i])
    
    def test_compare(self):
        
        print("compare(board, oldBoard)")
        
        entry12 = [0,2,0,0,0,0,0,7,0,0,0,0,5,0,0,0,6,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,3,5,0,0,0,1,0,0,7,0,0,0,0,0,0,0,0,0,0,9,0,8,9,0,5,0,0,0,4,0,0,6,0,0,0,2,0,0,0,0,0,0,0,8,0,0,0,0,0]
        
        board1 = [[0]*9 for i in range(9)]
        sudokuSolverDense.initBoard(board1,entry12)
        
        board2 = [[0]*9 for i in range(9)]
        sudokuSolverDense.initBoard(board2,entry12)
        
        entry3 = [0,0,1,0,0,0,0,7,0,0,5,6,4,0,8,0,0,0,0,7,9,6,0,0,0,0,0,0,9,0,0,8,0,2,0,0,0,0,0,0,9,0,6,0,1,5,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,6,3,0,9,8,0,0,0,0,0,1,0,0,0]
        
        board3 = [[0]*9 for i in range(9)]
        sudokuSolverDense.initBoard(board3,entry3)
        
        self.assertFalse(sudokuSolverDense.compare(board1,board2))
        self.assertFalse(sudokuSolverDense.compare(board2,board1))
        
        self.assertTrue(sudokuSolverDense.compare(board1,board3))
        self.assertTrue(sudokuSolverDense.compare(board3,board1))
        
        self.assertTrue(sudokuSolverDense.compare(board2,board3))
        self.assertTrue(sudokuSolverDense.compare(board3,board2))
    
    def test_getRowGuess(self):
        
        print("getRowGuess(board,y)")
        
        entry1 = [0,2,0,0,0,0,0,7,0,0,0,0,5,0,0,0,6,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,3,5,0,0,0,1,0,0,7,0,0,0,0,0,0,0,0,0,0,9,0,8,9,0,5,0,0,0,4,0,0,6,0,0,0,2,0,0,0,0,0,0,0,8,0,0,0,0,0]
        
        board1 = [[0]*9 for i in range(9)]
        sudokuSolverDense.initBoard(board1,entry1)
        
        row1 = sudokuSolverDense.getRowGuess(board1,6)
        
        row2 = [9, [1, 2, 3, 4, 5, 6, 7, 8, 9], 5, [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 4, [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]
        
        same = len(row1) == len(row2)
        self.assertTrue(same)
        if not same:
            return
        
        for i in range(len(row1)):
            if type(row1[i]) != type(row2[i]):
                same = False
                break
            if type(row1[i]) == int:
                if row1[i] != row2[i]:
                    same = False
                    break
            else:
                if len(row1[i]) != len(row2[i]):
                    same = False
                    break
                for j in range(len(row1[i])):
                    if row1[i][j] != row2[i][j]:
                        same = False
                        break
        
        self.assertTrue(same)
    
    def test_getRow(self):
        
        print("getRow(board,y)")
        
        entry1 = [0,2,0,0,0,0,0,7,0,0,0,0,5,0,0,0,6,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,3,5,0,0,0,1,0,0,7,0,0,0,0,0,0,0,0,0,0,9,0,8,9,0,5,0,0,0,4,0,0,6,0,0,0,2,0,0,0,0,0,0,0,8,0,0,0,0,0]
        
        board1 = [[0]*9 for i in range(9)]
        sudokuSolverDense.initBoard(board1,entry1)
        
        row1 = sudokuSolverDense.getRow(board1,6)
        
        row2 = [9, 0, 5, 0, 0, 0, 4, 0, 0]
        
        same = len(row1) == len(row2)
        self.assertTrue(same)
        if not same:
            return
        
        for i in range(len(row1)):
            if type(row1[i]) != type(row2[i]):
                same = False
                break
            if type(row1[i]) == int:
                if row1[i] != row2[i]:
                    same = False
                    break
            else:
                if len(row1[i]) != len(row2[i]):
                    same = False
                    break
                for j in range(len(row1[i])):
                    if row1[i][j] != row2[i][j]:
                        same = False
                        break
        
        self.assertTrue(same)
    
    def test_getColGuess(self):
        
        print("getColGuess(board,x)")
        
        board = [[[1, 3, 4, 8], 2, 9, [3, 6], [1, 3, 4, 6, 8], [4, 8], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3, 7], [1, 2, 3, 7], 8, [5, 9], [4, 5], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        rowExpected = [[1, 3, 4, 8],[1, 3, 4, 7, 8],[1, 3, 4, 7, 8],[2, 4],5,[3, 7],9,6,[1, 2, 3, 7]]
        
        rowActual = sudokuSolverDense.getColGuess(board,0)
        
        for i in range(9):
            self.assertEqual(type(rowExpected[i]),type(rowActual[i]))
            if type(rowExpected[i]) == int:
                self.assertEqual(rowExpected[i],rowActual[i])
            else:
                self.assertEqual(len(rowExpected[i]),len(rowActual[i]))
                for j in range(len(rowExpected[i])):
                    self.assertEqual(rowExpected[i][j],rowActual[i][j])
    
    def test_getCol(self):
        
        print("getCol(board,x)")
        
        board = [[[1, 3, 4, 8], 2, 9, [3, 6], [1, 3, 4, 6, 8], [4, 8], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3, 7], [1, 2, 3, 7], 8, [5, 9], [4, 5], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        rowExpected = [0,0,0,0,5,0,9,6,0]
        
        rowActual = sudokuSolverDense.getCol(board,0)
        
        for i in range(9):
            self.assertEqual(type(rowExpected[i]),type(rowActual[i]))
            if type(rowExpected[i]) == int:
                self.assertEqual(rowExpected[i],rowActual[i])
            else:
                self.assertEqual(len(rowExpected[i]),len(rowActual[i]))
                for j in range(len(rowExpected[i])):
                    self.assertEqual(rowExpected[i][j],rowActual[i][j])
    
    def test_getSquareSquare(self):
        
        print("getSquareSquare(board,y,x)")
        
        board = [[[1, 3, 4, 8], 2, 9, [3, 6], [1, 3, 4, 6, 8], [4, 8], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3, 7], [1, 2, 3, 7], 8, [5, 9], [4, 5], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        squareSquareExpected = [[[1, 3, 4, 8], 2, 9],[[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7]],[[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7]]]
        
        for i in range(9):
            squareSquareActual = sudokuSolverDense.getSquareSquare(board,i//3,i%3)
            for j in range(3):
                self.assertEqual(len(squareSquareExpected[j]),len(squareSquareActual[j]))
                for k in range(3):
                    self.assertEqual(type(squareSquareExpected[j][k]),type(squareSquareActual[j][k]))
                    if type(squareSquareExpected[j][k]) == int:
                        self.assertEqual(squareSquareExpected[j][k],squareSquareActual[j][k])
                    else:
                        self.assertEqual(len(squareSquareExpected[j][k]),len(squareSquareActual[j][k]))
                        for l in range(len(squareSquareExpected[j][k])):
                            self.assertEqual(squareSquareExpected[j][k][l],squareSquareActual[j][k][l])
    
    def test_squareToRow(self):
        
        print("squareToRow(square)")
        
        square = [[[1, 3, 4, 8], 2, 9],[[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7]],[[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7]]]
        
        rowExpected = [[1, 3, 4, 8], 2, 9,[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7],[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7]]
        
        rowActual = sudokuSolverDense.squareToRow(square)
        
        for i in range(9):
            self.assertEqual(type(rowExpected[i]),type(rowActual[i]))
            if type(rowExpected[i]) == int:
                self.assertEqual(rowExpected[i],rowActual[i])
            else:
                self.assertEqual(len(rowExpected[i]),len(rowActual[i]))
                for j in range(len(rowExpected[i])):
                    self.assertEqual(rowExpected[i][j],rowActual[i][j])
    
    def test_getSquare(self):
        
        print("getSquare(board,y,x)")
        
        board = [[[1, 3, 4, 8], 2, 9, [3, 6], [1, 3, 4, 6, 8], [4, 8], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3, 7], [1, 2, 3, 7], 8, [5, 9], [4, 5], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        rowExpected = [[1, 3, 4, 8], 2, 9,[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7],[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7]]
        
        for y in range(3):
            for x in range(3):
                rowActual = sudokuSolverDense.getSquare(board,y,x)
                
                for i in range(9):
                    self.assertEqual(type(rowExpected[i]),type(rowActual[i]))
                    if type(rowExpected[i]) == int:
                        self.assertEqual(rowExpected[i],rowActual[i])
                    else:
                        self.assertEqual(len(rowExpected[i]),len(rowActual[i]))
                        for j in range(len(rowExpected[i])):
                            self.assertEqual(rowExpected[i][j],rowActual[i][j])
    
    def test_checkSets(self):
        
        print("checkSets(board,y,x)")
        
        board = [[[],  [], [], [], [], [], [], [], []],
                 [[],  [], [], [], [], [], [], [], []],
                 [[],  [], [], [4],[], [], [], [], []],
                 [[],  [],  5, [], [], [], [5],[], []],
                 [[],  [], [], [], [], [], [], [], []],
                 [[],  [], [], [], [], [], [], [], []],
                 [[3], [], [],  4, [], [], [], [], []],
                 [[],   3, [], [], [], [], [], [], []],
                 [[],  [], [], [], [], [], [], [], []]]
                 
        boardExpected3 = [[[],  [], [], [], [], [], [], [], []],
                          [[],  [], [], [], [], [], [], [], []],
                          [[],  [], [], [4],[], [], [], [], []],
                          [[],  [],  5, [], [], [], [5],[], []],
                          [[],  [], [], [], [], [], [], [], []],
                          [[],  [], [], [], [], [], [], [], []],
                          [[ ], [], [],  4, [], [], [], [], []],
                          [[],   3, [], [], [], [], [], [], []],
                          [[],  [], [], [], [], [], [], [], []]]
                          
        boardExpected4 = [[[],  [], [], [], [], [], [], [], []],
                          [[],  [], [], [], [], [], [], [], []],
                          [[],  [], [], [ ],[], [], [], [], []],
                          [[],  [],  5, [], [], [], [5],[], []],
                          [[],  [], [], [], [], [], [], [], []],
                          [[],  [], [], [], [], [], [], [], []],
                          [[ ], [], [],  4, [], [], [], [], []],
                          [[],   3, [], [], [], [], [], [], []],
                          [[],  [], [], [], [], [], [], [], []]]
                          
        boardExpected5 = [[[],  [], [], [], [], [], [], [], []],
                          [[],  [], [], [], [], [], [], [], []],
                          [[],  [], [], [ ],[], [], [], [], []],
                          [[],  [],  5, [], [], [], [ ],[], []],
                          [[],  [], [], [], [], [], [], [], []],
                          [[],  [], [], [], [], [], [], [], []],
                          [[ ], [], [],  4, [], [], [], [], []],
                          [[],   3, [], [], [], [], [], [], []],
                          [[],  [], [], [], [], [], [], [], []]]
        
        sudokuSolverDense.checkSets(board,6,0)
        self.boardsEqual(board,boardExpected3)
        
        sudokuSolverDense.checkSets(board,2,3)
        self.boardsEqual(board,boardExpected4)
        
        sudokuSolverDense.checkSets(board,3,6)
        self.boardsEqual(board,boardExpected5)
    
    def test_checkBoardSets(self):
        
        print("checkBoardSets(board)")
        
        board = [[[],  [], [], [], [], [], [], [], []],
                 [[],  [], [], [], [], [], [], [], []],
                 [[],  [], [], [4],[], [], [], [], []],
                 [[],  [],  5, [], [], [], [5],[], []],
                 [[],  [], [], [], [], [], [], [], []],
                 [[],  [], [], [], [], [], [], [], []],
                 [[3], [], [],  4, [], [], [], [], []],
                 [[],   3, [], [], [], [], [], [], []],
                 [[],  [], [], [], [], [], [], [], []]]
                          
        boardExpected = [[[],  [], [], [], [], [], [], [], []],
                         [[],  [], [], [], [], [], [], [], []],
                         [[],  [], [], [ ],[], [], [], [], []],
                         [[],  [],  5, [], [], [], [ ],[], []],
                         [[],  [], [], [], [], [], [], [], []],
                         [[],  [], [], [], [], [], [], [], []],
                         [[ ], [], [],  4, [], [], [], [], []],
                         [[],   3, [], [], [], [], [], [], []],
                         [[],  [], [], [], [], [], [], [], []]]
        
        sudokuSolverDense.checkBoardSets(board)
        self.boardsEqual(board,boardExpected)
    
    def test_simplify(self):
        
        print("simplify(board)")
        
        board = [[[1, 3, 4, 8], 2, 9, [3], [1, 3, 4, 6, 8], [4, 8], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3], [1, 2, 3, 7], 8, [5, 9], [4], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        boardExpected = [[[1, 3, 4, 8], 2, 9, 3, [1, 3, 4, 6, 8], [4, 8], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], 3, [1, 2, 3, 7], 8, [5, 9], 4, [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        self.assertFalse(sudokuSolverDense.simplify(board))
        self.boardsEqual(board,boardExpected)
        
        board = [[[1, 3, 4, 8], 2, 9, [3], [1, 3, 4, 6, 8], [], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3], [1, 2, 3, 7], 8, [5, 9], [4], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        boardExpected = [[[1, 3, 4, 8], 2, 9, 3, [1, 3, 4, 6, 8], [], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3], [1, 2, 3, 7], 8, [5, 9], [4], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        self.assertTrue(sudokuSolverDense.simplify(board))
        self.boardsEqual(board,boardExpected)
    
    def test_isValid(self):
        
        print("isValid(board)")
        
        board = [[[1, 3, 4, 8], 2, 2, [3, 6], [1, 3, 4, 6, 8], [4, 8], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3, 7], [1, 2, 3, 7], 8, [5, 9], [4, 5], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        self.assertFalse(sudokuSolverDense.isValid(board))
        
        board = [[[1, 3, 4, 8], 2, 9, [3, 6], [1, 3, 4, 6, 8], [4, 8], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3, 7], [1, 2, 3, 7], 8, [5, 9], [4, 5], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        self.assertTrue(sudokuSolverDense.isValid(board))
        
        board = [[[1, 3, 4, 8], 2, 9, [3, 6], [1, 3, 4, 6, 8], [4, 8], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], 2, 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3, 7], [1, 2, 3, 7], 8, [5, 9], [4, 5], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        self.assertFalse(sudokuSolverDense.isValid(board))
        
        board = [[[1, 3, 4, 8], 2, 9, [3, 6], [1, 3, 4, 6, 8], [4, 8], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 2, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3, 7], [1, 2, 3, 7], 8, [5, 9], [4, 5], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        self.assertFalse(sudokuSolverDense.isValid(board))
    
    def test_removeFromRow(self):
        
        print("removeFromRow(board,y,val,square)")
        
        board = [[[1, 3, 4, 8], 2, 9, [3, 6], [1, 3, 4, 6, 8], [4, 8], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3, 7], [1, 2, 3, 7], 8, [5, 9], [4, 5], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        boardExpected = [[[1, 3, 4, 8], 2, 9, [3, 6], [3, 4, 6, 8], [4, 8], [3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3, 7], [1, 2, 3, 7], 8, [5, 9], [4, 5], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        sudokuSolverDense.removeFromRow(board,0,1,0)
        
        self.boardsEqual(board,boardExpected)
        
        board = [[  [1, 3, 4, 8],       2,            9,          [3, 6], [1, 3, 4, 6, 8], [4, 8],     [1, 3, 8],         7,           5], 
                 [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7],      5,     [1, 3, 4, 8],   [2, 7],     [1, 2, 3, 8],      6,    [1, 2, 3, 4, 9]], 
                 [[1, 3, 4, 7, 8],      5,     [1, 3, 4, 6, 7],     9,   [1, 3, 4, 6, 8],  [2, 7],    [1, 2, 3, 8], [2, 3, 4, 8],  [1, 2, 3, 4]], 
                 
                 [    [2, 4],           9,          [2, 4],         6,          8,           3,             5,            1,           7], 
                 [      5,              1,            8,          [2, 4],       7,           9,         [2, 3, 6],    [2, 3, 4],  [2, 3, 4, 6]], 
                 [    [3, 7],           6,         [3, 7],          1,          5,           4,             9,          [2, 4],        8], 
                 
                 [      9,          [3, 7, 8],        5,         [3, 6, 7], [1, 3, 6],     [1, 6],          4,        [2, 3, 8],  [1, 2, 3, 6]], 
                 [      6,        [3, 4, 7, 8],  [1, 3, 4, 7],    [3, 7],      2,           5,        [1, 3, 7, 8],    [5, 9],      [1, 3]], 
                 [ [1, 2, 3, 7],      [3, 7],    [1, 2, 3, 7],       8,      [5, 9],       [4, 5],     [1, 3, 6, 7],    [5, 9],   [1, 3, 6]]]
        
        boardExpected=[[[1, 3, 4, 8],   2,            9,          [3, 6], [1, 3, 4, 6, 8], [4, 8],     [1, 3, 8],         7,           5], 
                 [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7],      5,     [1, 3, 4, 8],   [2, 7],     [1, 2, 3, 8],      6,    [1, 2, 3, 4, 9]], 
                 [[1, 3, 4, 7, 8],      5,     [1, 3, 4, 6, 7],     9,   [1, 3, 4, 6, 8],  [2, 7],    [1, 2, 3, 8], [2, 3, 4, 8],  [1, 2, 3, 4]], 
                 
                 [    [2, 4],           9,          [2, 4],         6,          8,           3,             5,            1,           7], 
                 [      5,              1,            8,          [2, 4],       7,           9,         [   3, 6],    [   3, 4],  [   3, 4, 6]], 
                 [    [3, 7],           6,         [3, 7],          1,          5,           4,             9,          [2, 4],        8], 
                 
                 [      9,          [3, 7, 8],        5,         [3, 6, 7], [1, 3, 6],     [1, 6],          4,        [2, 3, 8],  [1, 2, 3, 6]], 
                 [      6,        [3, 4, 7, 8],  [1, 3, 4, 7],    [3, 7],      2,           5,        [1, 3, 7, 8],    [5, 9],      [1, 3]], 
                 [ [1, 2, 3, 7],      [3, 7],    [1, 2, 3, 7],       8,      [5, 9],       [4, 5],     [1, 3, 6, 7],    [5, 9],   [1, 3, 6]]]
        
        sudokuSolverDense.removeFromRow(board,4,2,1)
        
        self.boardsEqual(board,boardExpected)
    
    def test_removeFromCol(self):
        
        print("removeFromCol(board,x,val,square)")
        
        board = [[[1, 3, 4, 8], 2, 9, [3, 6], [1, 3, 4, 6, 8], [4, 8], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[1, 2, 3, 7], [3, 7], [1, 2, 3, 7], 8, [5, 9], [4, 5], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        boardExpected = [[[1, 3, 4, 8], 2, 9, [3, 6], [1, 3, 4, 6, 8], [4, 8], [1, 3, 8], 7, 5], [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7], 5, [1, 3, 4, 8], [2, 7], [1, 2, 3, 8], 6, [1, 2, 3, 4, 9]], [[1, 3, 4, 7, 8], 5, [1, 3, 4, 6, 7], 9, [1, 3, 4, 6, 8], [2, 7], [1, 2, 3, 8], [2, 3, 4, 8], [1, 2, 3, 4]], [[2, 4], 9, [2, 4], 6, 8, 3, 5, 1, 7], [5, 1, 8, [2, 4], 7, 9, [2, 3, 6], [2, 3, 4], [2, 3, 4, 6]], [[3, 7], 6, [3, 7], 1, 5, 4, 9, [2, 4], 8], [9, [3, 7, 8], 5, [3, 6, 7], [1, 3, 6], [1, 6], 4, [2, 3, 8], [1, 2, 3, 6]], [6, [3, 4, 7, 8], [1, 3, 4, 7], [3, 7], 2, 5, [1, 3, 7, 8], [5, 9], [1, 3]], [[2, 3, 7], [3, 7], [1, 2, 3, 7], 8, [5, 9], [4, 5], [1, 3, 6, 7], [5, 9], [1, 3, 6]]]
        
        sudokuSolverDense.removeFromCol(board,0,1,0)
        
        self.boardsEqual(board,boardExpected)
        
        board = [[  [1, 3, 4, 8],       2,            9,          [3, 6], [1, 3, 4, 6, 8], [4, 8],     [1, 3, 8],         7,           5], 
                 [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3, 4, 7],      5,     [1, 3, 4, 8],   [2, 7],     [1, 2, 3, 8],      6,    [1, 2, 3, 4, 9]], 
                 [[1, 3, 4, 7, 8],      5,     [1, 3, 4, 6, 7],     9,   [1, 3, 4, 6, 8],  [2, 7],    [1, 2, 3, 8], [2, 3, 4, 8],  [1, 2, 3, 4]], 
                 
                 [    [2, 4],           9,          [2, 4],         6,          8,           3,             5,            1,           7], 
                 [      5,              1,            8,          [2, 4],       7,           9,         [2, 3, 6],    [2, 3, 4],  [2, 3, 4, 6]], 
                 [    [3, 7],           6,         [3, 7],          1,          5,           4,             9,          [2, 4],        8], 
                 
                 [      9,          [3, 7, 8],        5,         [3, 6, 7], [1, 3, 6],     [1, 6],          4,        [2, 3, 8],  [1, 2, 3, 6]], 
                 [      6,        [3, 4, 7, 8],  [1, 3, 4, 7],    [3, 7],      2,           5,        [1, 3, 7, 8],    [5, 9],      [1, 3]], 
                 [ [1, 2, 3, 7],      [3, 7],    [1, 2, 3, 7],       8,      [5, 9],       [4, 5],     [1, 3, 6, 7],    [5, 9],   [1, 3, 6]]]
        
        boardExpected=[[[1, 3, 4, 8],   2,            9,          [3, 6], [1, 3, 4, 6, 8], [4, 8],     [1, 3, 8],         7,           5], 
                 [[1, 3, 4, 7, 8], [3, 4, 7, 8], [1, 3,    7],      5,     [1, 3, 4, 8],   [2, 7],     [1, 2, 3, 8],      6,    [1, 2, 3, 4, 9]], 
                 [[1, 3, 4, 7, 8],      5,     [1, 3,    6, 7],     9,   [1, 3, 4, 6, 8],  [2, 7],    [1, 2, 3, 8], [2, 3, 4, 8],  [1, 2, 3, 4]], 
                 
                 [    [2, 4],           9,          [2   ],         6,          8,           3,             5,            1,           7], 
                 [      5,              1,            8,          [2, 4],       7,           9,         [2, 3, 6],    [2, 3, 4],  [2, 3, 4, 6]], 
                 [    [3, 7],           6,         [3, 7],          1,          5,           4,             9,          [2, 4],        8], 
                 
                 [      9,          [3, 7, 8],        5,         [3, 6, 7], [1, 3, 6],     [1, 6],          4,        [2, 3, 8],  [1, 2, 3, 6]], 
                 [      6,        [3, 4, 7, 8],  [1, 3, 4, 7],    [3, 7],      2,           5,        [1, 3, 7, 8],    [5, 9],      [1, 3]], 
                 [ [1, 2, 3, 7],      [3, 7],    [1, 2, 3, 7],       8,      [5, 9],       [4, 5],     [1, 3, 6, 7],    [5, 9],   [1, 3, 6]]]
        
        sudokuSolverDense.removeFromCol(board,2,4,2)
        
        self.boardsEqual(board,boardExpected)
    
    def test_checkAlignments(self):
        
        print("\ncheckAlignments(board)")
        
        board = [[[4],[2],[2],[3,4],0,[4],6,5,7],
                 [[4],[2],7,[3,4],5,6,1,9,8],
                 [8,6,5,0,0,7,3,2,4],
                 [6,5,8,0,4,3,7,1,2],
                 [2,9,4,6,7,1,8,3,5],
                 [7,[1,3],[1,3],[2],[2],5,4,6,0],
                 [3,7,[2],5,6,[2,4],9,[4],[1]],
                 [5,4,[6],0,3,9,2,7,[1,6]],
                 [0,[2],[2,6],7,[2],[2,4],5,[4],3]]
                
        for x in board:
            self.assertTrue(len(x)==9)
        
        boardExpected = [[[4],[2],  [2],  [3,4],0,  [],    6, 5,  7],
                         [[4],[2],   7,   [3,4],5,   6,    1, 9,  8],
                         [ 8,  6,    5,     0,  0,   7,    3, 2,  4],
                         
                         [ 6,  5,    8,     0,  4,   3,    7, 1,  2],
                         [ 2,  9,    4,     6,  7,   1,    8, 3,  5],
                         [ 7,[1,3],[1,3],  [2],[2],  5,    4, 6,  0],
                         
                         [ 3,  7,   [2],    5,  6, [2,4],  9,[4],[1]],
                         [ 5,  4,    [],    0,  3,   9,    2, 7,[1,6]],
                         [ 0, [2], [2,6],   7, [2],[2,4],  5,[4], 3]]
        
        sudokuSolverDense.checkAlignments(board)
        
        self.boardsEqual(board,boardExpected)
    
    def test_coordArrayEqual(self):
        
        print("coordArrayEqual(arr1,arr2) Incomplete")
        
        print("-------------------------- Not used: check main code")
    
    def test_coordArrayWithin(self):
        
        print("coordArrayWithin(arr1,arr2)")
        
        arr1 = [[1,1],[3,5],[6,7]]
        arr2 = [[1,1],[6,7]]
        
        self.assertTrue(sudokuSolverDense.coordArrayWithin(arr1, arr2))
        
        arr1 = [[1,1],[3,5],[6,7]]
        arr2 = [[1,1],[7,6]]
        
        self.assertFalse(sudokuSolverDense.coordArrayWithin(arr1, arr2))
        
        arr1 = [[1,1],[3,5],[6,7]]
        arr2 = [[1,1],[6,7],[4,5]]
        
        self.assertFalse(sudokuSolverDense.coordArrayWithin(arr1, arr2))
        
        arr1 = [[1,1],[3,5],[6,7]]
        arr2 = [[4,5]]
        
        self.assertFalse(sudokuSolverDense.coordArrayWithin(arr1, arr2))
        
        arr1 = [[2,1],[3,4],[6,7]]
        arr2 = []
        
        self.assertFalse(sudokuSolverDense.coordArrayWithin(arr1, arr2))
    
    def test_checkGroups(self):
        
        print("checkGroups(board)")
        
        board = [[[4],0,0,[4,3],0,[4],[5,6,7],[5],[6,7]],
                 [[4],0,7,[4,3],5,6,1,9,8],
                 [8,6,5,0,0,7,3,2,4],
                 [6,5,8,0,4,3,0,1,2],
                 [2,9,4,6,7,1,8,3,5],
                 [7,[1,3],[1,3],[2],[2],5,0,6,0],
                 [3,7,0,5,6,[4],9,[4],[1]],
                 [5,4,[6],0,3,9,[2,6],7,[1,6]],
                 [0,0,[6],7,0,[4],[2,4,5,6],[4,5],3]]
                
        for x in board:
            self.assertTrue(len(x)==9)
        
        boardExpected = [[[4],0,0,[4,3],0,[4],[6,7],[5],[6,7]],
                         [[4],0,7,[4,3],5,6,1,9,8],
                         [8,6,5,0,0,7,3,2,4],
                         [6,5,8,0,4,3,0,1,2],
                         [2,9,4,6,7,1,8,3,5],
                         [7,[1,3],[1,3],[2],[2],5,0,6,0],
                         [3,7,0,5,6,[4],9,[4],[1]],
                         [5,4,[6],0,3,9,[2,6],7,[1,6]],
                         [0,0,[6],7,0,[4],[2,4,5,6],[4,5],3]]
        
        sudokuSolverDense.checkGroups(board)
        
        self.boardsEqual(board,boardExpected)
    
    def test_isComplete(self):
        
        print("isComplete(board)")
        
        board = [[0]*9 for _ in range(9)]
        
        self.assertTrue(sudokuSolverDense.isComplete(board))
        
        board[5][6] = []
        
        self.assertFalse(sudokuSolverDense.isComplete(board))
    
    def test_getAppearsOnce(self):
        
        print("getAppearsOnce(row)")
        
        row = [[1,2],[1],[3,4],[3,4],2]
        
        onceExpected = [2]
        
        onceActual = sudokuSolverDense.getAppearsOnce(row)
        
        self.assertEqual(len(onceExpected),len(onceActual))
        for i in range(len(onceExpected)):
            self.assertEqual(onceExpected[i],onceActual[i])
    
    def test_oneOption(self):
        
        print("oneOption(board)")
        
        board = [[ [],  [], [],  [], [], [],  [], [], []],
                 [ [],  [3],[3], [], [], [],  [], [], []],
                 [ [],  [3],[3], [], [], [],  [], [], []],
                 [ [],  [], [],  [], [], [],  [], [], []],
                 [ [],  [], [],  [], [], [],  [], [], []],
                 [ [],  [], [],  [], [], [],  [], [], []],
                 [[3,4],[3],[4], [], [], [],  [], [], []],
                 [ [4], [], [4], [], [], [],  [], [], []],
                 [ [],  [], [],  [], [], [],  [], [], []]]
                          
        boardExpected = [[[], [], [],  [], [], [],  [], [], []],
                         [[], [3],[3], [], [], [],  [], [], []],
                         [[], [3],[3], [], [], [],  [], [], []],
                         [[], [], [],  [], [], [],  [], [], []],
                         [[], [], [],  [], [], [],  [], [], []],
                         [[], [], [],  [], [], [],  [], [], []],
                         [[3],[3],[4], [], [], [],  [], [], []],
                         [[4],[], [4], [], [], [],  [], [], []],
                         [[], [], [],  [], [], [],  [], [], []]]
        
        sudokuSolverDense.oneOption(board)
        
        self.boardsEqual(board,boardExpected)
        
        board = [[ [],  [], [],  [], [], [], [3,4],[4],[]],
                 [ [],  [3],[3], [], [], [],  [3], [], []],
                 [ [],  [3],[3], [], [], [],  [4], [4],[]],
                 [ [],  [], [],  [], [], [],  [],  [], []],
                 [ [],  [], [],  [], [], [],  [],  [], []],
                 [ [],  [], [],  [], [], [],  [],  [], []],
                 [ [],  [], [],  [], [], [],  [],  [], []],
                 [ [],  [], [],  [], [], [],  [],  [], []],
                 [ [],  [], [],  [], [], [],  [],  [], []]]
                          
        boardExpected = [[ [],  [], [],  [], [], [],  [3], [4],[]],
                         [ [],  [3],[3], [], [], [],  [3], [], []],
                         [ [],  [3],[3], [], [], [],  [4], [4],[]],
                         [ [],  [], [],  [], [], [],  [],  [], []],
                         [ [],  [], [],  [], [], [],  [],  [], []],
                         [ [],  [], [],  [], [], [],  [],  [], []],
                         [ [],  [], [],  [], [], [],  [],  [], []],
                         [ [],  [], [],  [], [], [],  [],  [], []],
                         [ [],  [], [],  [], [], [],  [],  [], []]]
        
        sudokuSolverDense.oneOption(board)
        
        self.boardsEqual(board,boardExpected)
        
        board = [[ [],  [],  [],  [], [], [],  [], [], []],
                 [ [],  [3], [3], [], [], [],  [], [], []],
                 [ [],  [3], [3], [3],[3],[],  [], [], []],
                 [ [],  [],  [],  [], [], [],  [], [], []],
                 [ [],  [],  [],  [], [], [],  [], [], []],
                 [ [1], [1], [],  [], [], [],  [], [], []],
                 [ [1],[1,3],[],  [3],[3],[],  [], [], []],
                 [ [],  [],  [],  [], [], [],  [], [], []],
                 [ [],  [],  [],  [], [], [],  [], [], []]]
                          
        boardExpected = [[ [],  [], [],  [], [], [],  [], [], []],
                         [ [],  [3],[3], [], [], [],  [], [], []],
                         [ [],  [3],[3], [3],[3],[],  [], [], []],
                         [ [],  [], [],  [], [], [],  [], [], []],
                         [ [],  [], [],  [], [], [],  [], [], []],
                         [ [1], [1],[],  [], [], [],  [], [], []],
                         [ [1], [3],[],  [3],[3],[],  [], [], []],
                         [ [],  [], [],  [], [], [],  [], [], []],
                         [ [],  [], [],  [], [], [],  [], [], []]]
        
        sudokuSolverDense.oneOption(board)
        
        self.boardsEqual(board,boardExpected)
    
    def test_secondsToTime(self):
        
        print("secondsToTime(seconds)")
        
        self.assertEqual("1 day and 1 second",sudokuSolverDense.secondsToTime(86401))
        
        self.assertNotEqual("1 day and 1 second",sudokuSolverDense.secondsToTime(86400))
        
        self.assertEqual("2 years, 1 minute and 1 second",sudokuSolverDense.secondsToTime(86400*2*365+61))
    
    def test_followPath(self):
        
        print("followPath(board)")
        
        board = [[[4,8],[4,8],1,[3,9],[2,3],[2,9],5,7,6],
                 [2,5,6,4,7,8,9,1,3],
                 [3,7,9,6,1,5,8,2,4],
                 
                 [6,9,3,1,8,4,2,5,7],
                 [[7,8],[2,8],4,5,9,[2,7],6,3,1],
                 [5,1,[2,7],[3,7],[2,3],6,4,8,9],
                 
                 [1,6,[7,8],[7,8,9],5,[7,9],3,4,2],
                 [[4,7],[2,4],5,[2,7],6,3,1,9,8],
                 [9,3,[2,8],[2,8],4,1,7,6,5]]
                 
        boardExpected = [[4,8,1,9,3,2,5,7,6],
                         [2,5,6,4,7,8,9,1,3],
                         [3,7,9,6,1,5,8,2,4],
                         
                         [6,9,3,1,8,4,2,5,7],
                         [8,2,4,5,9,7,6,3,1],
                         [5,1,7,3,2,6,4,8,9],
                         
                         [1,6,8,7,5,9,3,4,2],
                         [7,4,5,2,6,3,1,9,8],
                         [9,3,2,8,4,1,7,6,5]]
        
        #Swap triple quote between below this line and below self. line
        
        print("----------------- Disabled for speed")
        """
        sudokuSolverDense.followPath(board)
        self.boardsEqual(board,boardExpected)
        """
    
    def test_insideI(self):
        
        print("insideI(arr,arr2)")
        
        arr = [1,2,3,4,5]
        
        arr2 = [1,2,3,4,5,6]
        self.assertFalse(sudokuSolverDense.insideI(arr,arr2))
        
        arr2 = [3,4,1,2,5,6]
        self.assertFalse(sudokuSolverDense.insideI(arr,arr2))
        
        arr2 = [1,2,3,4,5]
        self.assertTrue(sudokuSolverDense.insideI(arr,arr2))
        
        arr2 = [1,2,3,4]
        self.assertTrue(sudokuSolverDense.insideI(arr,arr2))
        
        arr2 = [1,3,4,2]
        self.assertTrue(sudokuSolverDense.insideI(arr,arr2))
    
    def test_checkOptionLine(self):
        
        print("checkOptionLine(board)")
        
        board = [[[1,2,3],[],[7],[],[1,2,3,5],[5],[],[1,2,3,7],[]],
                 [[1],[2],[],[],[],[],[],[],[]],
                 [[],[],[5],[],[],[5],[],[],[7]],
                 [[],[],[],[],[],[],[],[],[]],
                 [[3],[],[],[],[],[],[],[],[]],
                 [[],[],[],[],[],[],[],[],[]],
                 [[],[],[],[],[],[],[],[],[]],
                 [[],[],[],[],[],[],[],[],[]],
                 [[2],[],[],[],[],[],[],[],[]]]
                 
        boardExpected = [[[1,2,3],[],[7],[],[1,2,3],[5],[],[1,2,3],[]],
                         [[1],[2],[],[],[],[],[],[],[]],
                         [[],[],[5],[],[],[5],[],[],[7]],
                         [[],[],[],[],[],[],[],[],[]],
                         [[3],[],[],[],[],[],[],[],[]],
                         [[],[],[],[],[],[],[],[],[]],
                         [[],[],[],[],[],[],[],[],[]],
                         [[],[],[],[],[],[],[],[],[]],
                         [[2],[],[],[],[],[],[],[],[]]]
        
        sudokuSolverDense.checkOptionLine(board)
        
        self.boardsEqual(board,boardExpected)
        board = [[[1, 2, 3], [1], [], [], [], [3], [], [], [2]], [[], [2], [], [], [], [], [], [], []], [[7], [], [5], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], []], [[1, 2, 3, 5], [], [], [], [], [], [], [], []], [[5], [], [5], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], []], [[1, 2, 3, 7], [], [], [], [], [], [], [], []], [[], [], [7], [], [], [], [], [], []]]
        
        boardExpected = [[[1, 2, 3], [1], [], [], [], [3], [], [], [2]], [[], [2], [], [], [], [], [], [], []], [[7], [], [5], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], []], [[1, 2, 3], [], [], [], [], [], [], [], []], [[5], [], [5], [], [], [], [], [], []], [[], [], [], [], [], [], [], [], []], [[1, 2, 3], [], [], [], [], [], [], [], []], [[], [], [7], [], [], [], [], [], []]]

        sudokuSolverDense.checkOptionLine(board)
        
        self.boardsEqual(board,boardExpected)
    
    def test_initBoard(self):
        
        print("initBoard(board,entry) Incomplete")
        
        entry = [0,0,1,0,0,0,0,7,0,0,5,6,4,0,8,0,0,0,0,7,9,6,0,0,0,0,0,0,9,0,0,8,0,2,0,0,0,0,0,0,9,0,6,0,1,5,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,6,3,0,9,8,0,0,0,0,0,1,0,0,0]
        
        boardExpected = [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 1, [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 7, [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 6, 4, [1, 2, 3, 4, 5, 6, 7, 8, 9], 8, [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 7, 9, 6, [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 9, [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 8, [1, 2, 3, 4, 5, 6, 7, 8, 9], 2, [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 9, [1, 2, 3, 4, 5, 6, 7, 8, 9], 6, [1, 2, 3, 4, 5, 6, 7, 8, 9], 1], [5, [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 6, [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 4, [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 6, 3, [1, 2, 3, 4, 5, 6, 7, 8, 9], 9, 8], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], 1, [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]]
        
        board = [[0]*9 for i in range(9)]
        
        sudokuSolverDense.initBoard(board,entry)
        
        self.boardsEqual(board,boardExpected)

if __name__ == "__main__":
    unittest.main()